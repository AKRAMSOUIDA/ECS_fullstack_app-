name: 🏗️ Terraform Infrastructure

on:
  push:
    branches: [aws-mcp-nodejs-nextjs-ecs]
    paths:
      - 'Terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [aws-mcp-nodejs-nextjs-ecs]
    paths:
      - 'Terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  TF_VERSION: '1.6.0'

jobs:
  # =============================================================================
  # TERRAFORM VALIDATION AND PLANNING
  # =============================================================================
  terraform-check:
    name: 🔍 Terraform Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Terraform
    outputs:
      tf-plan-exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📋 Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          # Generated by GitHub Actions
          aws_region   = "${{ env.AWS_REGION }}"
          project_name = "fullstack-app"
          environment  = "${{ github.event.inputs.environment || 'dev' }}"
          
          # ECS Configuration
          api_cpu           = 512
          api_memory        = 1024
          frontend_cpu      = 512
          frontend_memory   = 1024
          
          # Scaling Configuration
          api_desired_count      = 2
          frontend_desired_count = 2
          enable_auto_scaling    = true
          
          # Monitoring
          log_retention_days        = 7
          enable_container_insights = true
          
          # Security
          allowed_cidr_blocks = ["0.0.0.0/0"]
          
          # Features
          enable_https_redirect            = true
          enable_cross_zone_load_balancing = true
          
          # Tags
          additional_tags = {
            DeployedBy = "GitHub Actions"
            Repository = "${{ github.repository }}"
            Branch     = "${{ github.ref_name }}"
            CommitSHA  = "${{ github.sha }}"
          }
          EOF

      - name: 🔧 Terraform Format Check
        run: terraform fmt -check -recursive

      - name: 🚀 Terraform Init
        run: terraform init

      - name: ✅ Terraform Validate
        run: terraform validate

      - name: 📋 Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -no-color -out=tfplan
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 📊 Plan Summary
        run: |
          echo "## 🏗️ Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.plan.outputs.exitcode }}" == "0" ]]; then
            echo "✅ **No changes detected** - Infrastructure is up to date" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.plan.outputs.exitcode }}" == "2" ]]; then
            echo "📋 **Changes detected** - Review the plan below" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Terraform Plan Output:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            terraform show -no-color tfplan | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Plan failed** - Check the logs for errors" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💾 Upload Plan Artifact
        if: steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: Terraform/tfplan
          retention-days: 5

  # =============================================================================
  # TERRAFORM APPLY (Manual Approval Required)
  # =============================================================================
  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-check
    if: |
      github.event.inputs.action == 'apply' && 
      needs.terraform-check.outputs.tf-plan-exitcode == '2'
    environment: 
      name: terraform-${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: ./Terraform
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📋 Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          # Generated by GitHub Actions
          aws_region   = "${{ env.AWS_REGION }}"
          project_name = "fullstack-app"
          environment  = "${{ github.event.inputs.environment || 'dev' }}"
          
          # ECS Configuration
          api_cpu           = 512
          api_memory        = 1024
          frontend_cpu      = 512
          frontend_memory   = 1024
          
          # Scaling Configuration
          api_desired_count      = 2
          frontend_desired_count = 2
          enable_auto_scaling    = true
          
          # Monitoring
          log_retention_days        = 7
          enable_container_insights = true
          
          # Security
          allowed_cidr_blocks = ["0.0.0.0/0"]
          
          # Features
          enable_https_redirect            = true
          enable_cross_zone_load_balancing = true
          
          # Tags
          additional_tags = {
            DeployedBy = "GitHub Actions"
            Repository = "${{ github.repository }}"
            Branch     = "${{ github.ref_name }}"
            CommitSHA  = "${{ github.sha }}"
          }
          EOF

      - name: 🚀 Terraform Init
        run: terraform init

      - name: 💾 Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: Terraform/

      - name: 🚀 Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: 📤 Terraform Outputs
        id: outputs
        run: |
          terraform output -json > terraform-outputs.json
          echo "outputs<<EOF" >> $GITHUB_OUTPUT
          cat terraform-outputs.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📊 Apply Summary
        run: |
          echo "## 🚀 Terraform Apply Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Infrastructure deployed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Application URLs:" >> $GITHUB_STEP_SUMMARY
          
          if command -v jq &> /dev/null; then
            ALB_DNS=$(jq -r '.alb_dns_name.value // "Not Available"' terraform-outputs.json)
            HTTPS_URL=$(jq -r '.application_urls.value.https // "Not Available"' terraform-outputs.json)
            
            echo "- **HTTPS URL:** $HTTPS_URL" >> $GITHUB_STEP_SUMMARY
            echo "- **ALB DNS:** $ALB_DNS" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Infrastructure Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed At:** $(date -u)" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # TERRAFORM DESTROY (Manual Approval Required)
  # =============================================================================
  terraform-destroy:
    name: 🗑️ Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: 
      name: terraform-destroy-${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: ./Terraform
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📋 Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          # Generated by GitHub Actions
          aws_region   = "${{ env.AWS_REGION }}"
          project_name = "fullstack-app"
          environment  = "${{ github.event.inputs.environment || 'dev' }}"
          
          # ECS Configuration
          api_cpu           = 512
          api_memory        = 1024
          frontend_cpu      = 512
          frontend_memory   = 1024
          
          # Scaling Configuration
          api_desired_count      = 2
          frontend_desired_count = 2
          enable_auto_scaling    = true
          
          # Monitoring
          log_retention_days        = 7
          enable_container_insights = true
          
          # Security
          allowed_cidr_blocks = ["0.0.0.0/0"]
          
          # Features
          enable_https_redirect            = true
          enable_cross_zone_load_balancing = true
          
          # Tags
          additional_tags = {
            DeployedBy = "GitHub Actions"
            Repository = "${{ github.repository }}"
            Branch     = "${{ github.ref_name }}"
            CommitSHA  = "${{ github.sha }}"
          }
          EOF

      - name: 🚀 Terraform Init
        run: terraform init

      - name: 🗑️ Terraform Destroy
        run: terraform destroy -auto-approve

      - name: 📊 Destroy Summary
        run: |
          echo "## 🗑️ Terraform Destroy Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Infrastructure destroyed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Destruction Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Destroyed At:** $(date -u)" >> $GITHUB_STEP_SUMMARY
