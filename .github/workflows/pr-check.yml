name: 🔍 Pull Request Checks

on:
  pull_request:
    branches: [aws-mcp-nodejs-nextjs-ecs]
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install API Dependencies
        run: |
          cd api
          npm ci

      - name: 📦 Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 Lint API Code
        run: |
          cd api
          npm run lint --if-present || echo "No lint script found"

      - name: 🔍 Lint Frontend Code
        run: |
          cd frontend
          npm run lint --if-present || echo "No lint script found"

      - name: 🧪 Test API
        run: |
          cd api
          npm test --if-present || echo "No test script found"

      - name: 🧪 Test Frontend
        run: |
          cd frontend
          npm test --if-present || echo "No test script found"

      - name: 🏗️ Build Frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: https://example.com

  # =============================================================================
  # SECURITY CHECKS
  # =============================================================================
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

      - name: 🔍 Check for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # TERRAFORM VALIDATION
  # =============================================================================
  terraform-validate:
    name: 🏗️ Terraform Validate
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'Terraform/')
    defaults:
      run:
        working-directory: ./Terraform
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: 🔧 Terraform Format Check
        run: terraform fmt -check -recursive

      - name: 🚀 Terraform Init
        run: terraform init -backend=false

      - name: ✅ Terraform Validate
        run: terraform validate

      - name: 📋 Terraform Plan (Dry Run)
        run: |
          # Create a minimal tfvars for validation
          cat > terraform.tfvars << EOF
          aws_region   = "us-east-1"
          project_name = "fullstack-app"
          environment  = "dev"
          EOF
          
          terraform plan -no-color > plan.txt || true
          
          # Add plan to PR comment
          echo "## 🏗️ Terraform Plan Preview" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -50 plan.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # DOCKER BUILD TEST
  # =============================================================================
  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, frontend]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: false
          tags: test-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Image
        run: |
          # Start container in background
          docker run -d --name test-${{ matrix.component }} -p 300${{ matrix.component == 'api' && '1' || '0' }}:300${{ matrix.component == 'api' && '1' || '0' }} test-${{ matrix.component }}:latest
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          if [ "${{ matrix.component }}" == "api" ]; then
            curl -f http://localhost:3001/health || exit 1
          else
            curl -f http://localhost:3000 || exit 1
          fi
          
          # Cleanup
          docker stop test-${{ matrix.component }}
          docker rm test-${{ matrix.component }}

  # =============================================================================
  # PR SUMMARY
  # =============================================================================
  pr-summary:
    name: 📊 PR Summary
    runs-on: ubuntu-latest
    needs: [code-quality, security-check, terraform-validate, docker-build-test]
    if: always()
    steps:
      - name: 📊 Generate PR Summary
        run: |
          echo "## 🔍 Pull Request Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Code Quality
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "| 🔍 Code Quality | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔍 Code Quality | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security Check
          if [[ "${{ needs.security-check.result }}" == "success" ]]; then
            echo "| 🔒 Security Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔒 Security Check | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Terraform Validate
          if [[ "${{ needs.terraform-validate.result }}" == "success" ]] || [[ "${{ needs.terraform-validate.result }}" == "skipped" ]]; then
            echo "| 🏗️ Terraform Validate | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🏗️ Terraform Validate | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Docker Build Test
          if [[ "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "| 🐳 Docker Build Test | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🐳 Docker Build Test | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.code-quality.result }}" == "success" ]] && \
             [[ "${{ needs.security-check.result }}" == "success" ]] && \
             ([[ "${{ needs.terraform-validate.result }}" == "success" ]] || [[ "${{ needs.terraform-validate.result }}" == "skipped" ]]) && \
             [[ "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "### ✅ All checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Some checks failed. Please review and fix the issues." >> $GITHUB_STEP_SUMMARY
          fi
