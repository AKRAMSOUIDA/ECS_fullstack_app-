name: 🚀 Deploy Fullstack Application

on:
  push:
    branches: [aws-mcp-nodejs-nextjs-ecs]
    paths:
      - 'api/**'
      - 'frontend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [aws-mcp-nodejs-nextjs-ecs]
    paths:
      - 'api/**'
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION || 'us-east-1' }}.amazonaws.com
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME || 'fullstack-cluster' }}
  PROJECT_NAME: fullstack-app

jobs:
  # =============================================================================
  # DETECT CHANGES
  # =============================================================================
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      any-changed: ${{ steps.changes.outputs.api == 'true' || steps.changes.outputs.frontend == 'true' }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'api/**'
            frontend:
              - 'frontend/**'

      - name: 📊 Changes Summary
        run: |
          echo "API Changed: ${{ steps.changes.outputs.api }}"
          echo "Frontend Changed: ${{ steps.changes.outputs.frontend }}"
          echo "Any Changed: ${{ steps.changes.outputs.api == 'true' || steps.changes.outputs.frontend == 'true' }}"

  # =============================================================================
  # TEST JOBS
  # =============================================================================
  test-api:
    name: 🧪 Test API
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true' || github.event.inputs.force_deploy == 'true'
    defaults:
      run:
        working-directory: ./api
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Tests
        run: npm test --if-present

      - name: 🔍 Run Linting
        run: npm run lint --if-present

      - name: 🏥 Health Check Test
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:3001/health || exit 1
          pkill -f "node"

  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true' || github.event.inputs.force_deploy == 'true'
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Tests
        run: npm test --if-present

      - name: 🔍 Run Linting
        run: npm run lint --if-present

      - name: 🏗️ Build Application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://example.com

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changed == 'true' || github.event.inputs.force_deploy == 'true'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # BUILD AND PUSH IMAGES
  # =============================================================================
  build-and-push:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: [detect-changes, test-api, test-frontend]
    if: |
      always() && 
      (needs.detect-changes.outputs.any-changed == 'true' || github.event.inputs.force_deploy == 'true') &&
      (needs.test-api.result == 'success' || needs.test-api.result == 'skipped') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    outputs:
      api-image: ${{ steps.build-api.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      image-tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏷️ Generate Metadata
        id: meta
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=${GITHUB_SHA::8}
          TAG="${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and Push API Image
        id: build-api
        if: needs.detect-changes.outputs.api-changed == 'true' || github.event.inputs.force_deploy == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-nodejs-api:latest
            ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-nodejs-api:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🏗️ Build and Push Frontend Image
        id: build-frontend
        if: needs.detect-changes.outputs.frontend-changed == 'true' || github.event.inputs.force_deploy == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-nextjs-frontend:latest
            ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-nextjs-frontend:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: 📊 Image Build Summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Image Tag |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.detect-changes.outputs.api-changed }}" == "true" ]]; then
            echo "| API | ✅ Built | \`${{ steps.meta.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| API | ⏭️ Skipped | No changes |" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "| Frontend | ✅ Built | \`${{ steps.meta.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend | ⏭️ Skipped | No changes |" >> $GITHUB_STEP_SUMMARY
          fi

  # =============================================================================
  # DEPLOY TO ECS
  # =============================================================================
  deploy:
    name: 🚀 Deploy to ECS
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: |
      always() && 
      needs.build-and-push.result == 'success' &&
      github.ref == 'refs/heads/aws-mcp-nodejs-nextjs-ecs'
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ steps.deploy-status.outputs.app-url }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📥 Download Task Definition Templates
        run: |
          # Create task definition templates if they don't exist
          mkdir -p .aws
          
          # API Task Definition
          cat > .aws/api-task-definition.json << EOF
          {
            "family": "${{ env.PROJECT_NAME }}-api-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "containerDefinitions": [
              {
                "name": "nodejs-api",
                "image": "<IMAGE_URI>",
                "portMappings": [
                  {
                    "containerPort": 3001,
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "environment": [
                  {
                    "name": "NODE_ENV",
                    "value": "production"
                  },
                  {
                    "name": "PORT",
                    "value": "3001"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/${{ env.PROJECT_NAME }}-api",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                },
                "healthCheck": {
                  "command": ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3,
                  "startPeriod": 60
                }
              }
            ]
          }
          EOF
          
          # Frontend Task Definition
          cat > .aws/frontend-task-definition.json << EOF
          {
            "family": "${{ env.PROJECT_NAME }}-frontend-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "containerDefinitions": [
              {
                "name": "nextjs-frontend",
                "image": "<IMAGE_URI>",
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "environment": [
                  {
                    "name": "NODE_ENV",
                    "value": "production"
                  },
                  {
                    "name": "NEXT_PUBLIC_API_URL",
                    "value": "${{ secrets.NEXT_PUBLIC_API_URL }}"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/${{ env.PROJECT_NAME }}-frontend",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                },
                "healthCheck": {
                  "command": ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3,
                  "startPeriod": 60
                }
              }
            ]
          }
          EOF

      - name: 🔄 Deploy API to ECS
        id: deploy-api
        if: needs.detect-changes.outputs.api-changed == 'true' || github.event.inputs.force_deploy == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition-family: ${{ env.PROJECT_NAME }}-api-task
          task-definition: .aws/api-task-definition.json
          service: ${{ secrets.ECS_API_SERVICE_NAME || 'nodejs-api-service' }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10
        env:
          IMAGE_URI: ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-nodejs-api:${{ needs.build-and-push.outputs.image-tag }}

      - name: 🔄 Deploy Frontend to ECS
        id: deploy-frontend
        if: needs.detect-changes.outputs.frontend-changed == 'true' || github.event.inputs.force_deploy == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition-family: ${{ env.PROJECT_NAME }}-frontend-task
          task-definition: .aws/frontend-task-definition.json
          service: ${{ secrets.ECS_FRONTEND_SERVICE_NAME || 'nextjs-frontend-service' }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10
        env:
          IMAGE_URI: ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-nextjs-frontend:${{ needs.build-and-push.outputs.image-tag }}

      - name: 📊 Get Deployment Status
        id: deploy-status
        run: |
          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names "${{ env.PROJECT_NAME }}-alb" \
            --query 'LoadBalancers[0].DNSName' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
            APP_URL="https://${ALB_DNS}"
            echo "app-url=${APP_URL}" >> $GITHUB_OUTPUT
            echo "alb-dns=${ALB_DNS}" >> $GITHUB_OUTPUT
          else
            echo "app-url=Not Available" >> $GITHUB_OUTPUT
            echo "alb-dns=Not Found" >> $GITHUB_OUTPUT
          fi

      - name: 🏥 Health Check
        run: |
          if [ "${{ steps.deploy-status.outputs.app-url }}" != "Not Available" ]; then
            echo "🏥 Performing health check..."
            sleep 30  # Wait for deployment to stabilize
            
            # Health check with retries
            for i in {1..5}; do
              if curl -k -f "${{ steps.deploy-status.outputs.app-url }}/health" --max-time 10; then
                echo "✅ Health check passed!"
                break
              else
                echo "⏳ Health check attempt $i failed, retrying..."
                sleep 10
              fi
            done
          else
            echo "⚠️ Skipping health check - ALB DNS not available"
          fi

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Service |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.detect-changes.outputs.api-changed }}" == "true" ]]; then
            echo "| API | ✅ Deployed | \`${{ secrets.ECS_API_SERVICE_NAME || 'nodejs-api-service' }}\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| API | ⏭️ Skipped | No changes |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "| Frontend | ✅ Deployed | \`${{ secrets.ECS_FRONTEND_SERVICE_NAME || 'nextjs-frontend-service' }}\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend | ⏭️ Skipped | No changes |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🌐 Application URL:** ${{ steps.deploy-status.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "**🏷️ Image Tag:** \`${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**🕒 Deployed At:** $(date -u)" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push, deploy]
    if: always()
    steps:
      - name: 📢 Deployment Notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully!"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "❌ Deployment failed!"
            exit 1
          else
            echo "⏭️ Deployment skipped or cancelled"
          fi
